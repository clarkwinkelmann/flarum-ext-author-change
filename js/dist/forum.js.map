{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@clarkwinkelmann/author-change/webpack/bootstrap","webpack://@clarkwinkelmann/author-change/webpack/runtime/compat get default export","webpack://@clarkwinkelmann/author-change/webpack/runtime/define property getters","webpack://@clarkwinkelmann/author-change/webpack/runtime/hasOwnProperty shorthand","webpack://@clarkwinkelmann/author-change/webpack/runtime/make namespace object","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['common/extend']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['forum/app']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['forum/utils/PostControls']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['common/components/Button']\"","webpack://@clarkwinkelmann/author-change/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@clarkwinkelmann/author-change/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@clarkwinkelmann/author-change/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['common/models/Post']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['common/helpers/avatar']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['common/helpers/username']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['forum/states/SearchState']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['common/components/Switch']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['forum/components/Search']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@clarkwinkelmann/author-change/external root \"flarum.core.compat['forum/components/UsersSearchSource']\"","webpack://@clarkwinkelmann/author-change/./src/forum/components/UsersSearchSourceWithoutInternalRouting.ts","webpack://@clarkwinkelmann/author-change/./src/forum/components/UserSearch.ts","webpack://@clarkwinkelmann/author-change/./src/forum/components/UpdateAuthorModal.ts","webpack://@clarkwinkelmann/author-change/./src/forum/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/PostControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Post'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/avatar'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/username'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/states/SearchState'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Switch'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/Search'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extractText'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/UsersSearchSource'];","import * as Mithril from 'mithril';\nimport app from 'flarum/forum/app';\nimport UsersSearchSource from 'flarum/forum/components/UsersSearchSource';\nimport Button from 'flarum/common/components/Button';\n\nexport default class UsersSearchSourceWithoutInternalRouting extends UsersSearchSource {\n    view(query: string): Array<Mithril.Vnode> {\n        const view = super.view(query);\n\n        // We want to keep only the result <li>s, and not any header or stuff injected by another extension\n        // In core:\n        // view[0] is the header\n        // view[1+] are the results\n        // When fof/user-directory is installed, view[1] is the link to the user directory page\n        const resultItems = view.filter(entry => {\n            return entry.attrs && entry.attrs.className && entry.attrs.className.indexOf('UserSearchResult') !== -1;\n        });\n\n        if (resultItems.length === 0) {\n            if (query.length < 3) {\n                return [\n                    m('li', Button.component({\n                        icon: 'fas fa-info-circle',\n                    }, app.translator.trans('clarkwinkelmann-author-change.forum.search.type-more'))),\n                ];\n            }\n\n            return [\n                m('li', Button.component({\n                    icon: 'fas fa-search-minus',\n                }, app.translator.trans('clarkwinkelmann-author-change.forum.search.no-results'))),\n            ];\n        }\n\n        resultItems.forEach((result: any) => {\n            if (Array.isArray(result.children) && result.children.length > 0) {\n                // We use a normal link instead of Mithril's Link so that we can cancel navigation\n                // with preventDefault() in UserSearch component\n                result.children[0].tag = 'a';\n            }\n        });\n\n        if (query.length < 3) {\n            resultItems.push(m('li', Button.component({\n                icon: 'fas fa-info-circle',\n            }, app.translator.trans('clarkwinkelmann-author-change.forum.search.type-more'))));\n        }\n\n        return resultItems;\n    }\n}\n","import * as Mithril from 'mithril';\nimport app from 'flarum/forum/app';\nimport Search, {SearchAttrs} from 'flarum/forum/components/Search';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport extractText from 'flarum/common/utils/extractText';\nimport User from 'flarum/common/models/User';\nimport UsersSearchSourceWithoutInternalRouting from './UsersSearchSourceWithoutInternalRouting';\n\ninterface UserSearchAttrs extends SearchAttrs {\n    onsubmit: (user: User) => void\n}\n\nexport default class UserSearch extends Search<UserSearchAttrs> {\n    selectUserElement(searchResultElement: HTMLElement) {\n        const index = searchResultElement.dataset.index;\n\n        if (!index) {\n            return;\n        }\n\n        // The \"index\" data attribute is the string \"user\" concatenated with the user ID\n        const userId = index.split('users')[1];\n\n        const user = app.store.getById<User>('users', userId)!;\n\n        this.attrs.onsubmit(user);\n    }\n\n    oncreate(vnode: Mithril.Vnode<UserSearchAttrs, this>) {\n        super.oncreate(vnode);\n\n        this.$('.Search-results').on('click', event => {\n            const $userSearchResult = $(event.target).parents('.UserSearchResult');\n\n            if ($userSearchResult.length) {\n                event.preventDefault();\n\n                this.selectUserElement($userSearchResult.get(0)!);\n            }\n        });\n    }\n\n    selectResult() {\n        clearTimeout(this.searchTimeout);\n        this.loadingSources = 0;\n\n        if (this.state.getValue()) {\n            this.selectUserElement(this.getItem(this.index).get(0)!);\n        } else {\n            this.clear();\n        }\n\n        this.$('input').trigger('blur');\n    }\n\n    clear() {\n        super.clear();\n\n        m.redraw();\n    }\n\n    sourceItems(): ItemList<any> {\n        const items = new ItemList();\n\n        if (app.forum.attribute('canSearchUsers')) items.add('users', new UsersSearchSourceWithoutInternalRouting());\n\n        return items;\n    }\n\n    view() {\n        const view = super.view() as any;\n\n        // view = .Search, [] = .Search-input, [][] = input.FormControl\n        view.children[0].children[0].attrs.placeholder = extractText(app.translator.trans('clarkwinkelmann-author-change.forum.search.placeholder'));\n\n        return view;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Modal, {IInternalModalAttrs} from 'flarum/common/components/Modal';\nimport Button from 'flarum/common/components/Button';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Post from 'flarum/common/models/Post';\nimport User from 'flarum/common/models/User';\nimport avatar from 'flarum/common/helpers/avatar';\nimport username from 'flarum/common/helpers/username';\nimport SearchState from 'flarum/forum/states/SearchState';\nimport Switch from 'flarum/common/components/Switch';\nimport UserSearch from './UserSearch';\n\ninterface UpdateAuthorModalAttrs extends IInternalModalAttrs {\n    related: Discussion | Post\n}\n\nexport default class UpdateAuthorModal extends Modal<UpdateAuthorModalAttrs> {\n    user!: User | null\n    createdAt?: string\n    editedAt!: string\n    syncFirstPost: boolean = false\n    otherModelForFirstPostSync: Discussion | Post | null = null\n    attributes: any = {}; // What we will send to the server. We only send what changed\n    dirty: boolean = false\n    loading: boolean = false\n    userSearchState!: SearchState\n\n    oninit(vnode: any) {\n        super.oninit(vnode);\n\n        const {related} = this.attrs;\n\n        const editedAt = related instanceof Post && related.editedAt();\n\n        this.user = related.user() || null;\n        this.createdAt = related.createdAt()?.toISOString().slice(0, 16);\n        this.editedAt = editedAt ? editedAt.toISOString().slice(0, 16) : '';\n        this.userSearchState = new SearchState();\n\n        // Workaround for https://github.com/flarum/core/issues/2399\n        this.userSearchState.getInitialSearch = () => '';\n\n        if (this.showFirstPostSync()) {\n            if (related instanceof Discussion) {\n                this.otherModelForFirstPostSync = related.firstPost() || null;\n\n                // The firstPost relationship will not be loaded if the discussion is accessed directly\n                // we will try to find the first post in the store\n                if (this.otherModelForFirstPostSync === null) {\n                    this.otherModelForFirstPostSync = app.store.all<Post>('posts').find(post => {\n                        return post.number() === 1 && post.discussion() === related;\n                    }) || null;\n                }\n            } else {\n                this.otherModelForFirstPostSync = related.discussion();\n            }\n\n            if (\n                this.otherModelForFirstPostSync &&\n                this.otherModelForFirstPostSync.user() === this.user &&\n                this.otherModelForFirstPostSync.createdAt()?.toISOString().slice(0, 16) === this.createdAt &&\n                this.createdAt // To make test fail if both createdAt are undefined\n            ) {\n                this.syncFirstPost = true;\n            }\n        }\n    }\n\n    showFirstPostSync(): boolean {\n        return (this.attrs.related instanceof Discussion) || this.attrs.related.number() === 1;\n    }\n\n    isPost(): boolean {\n        return this.attrs.related instanceof Post;\n    }\n\n    className() {\n        return 'Update-Author-Modal';\n    }\n\n    title() {\n        return app.translator.trans('clarkwinkelmann-author-change.forum.modal.title-' + (this.isPost() ? 'post' : 'discussion'));\n    }\n\n    content() {\n        return m('.Modal-body', [\n            app.forum.attribute('clarkwinkelmannAuthorChangeCanEditUser') ? m('.Form-group', [\n                m('label', app.translator.trans('clarkwinkelmann-author-change.forum.modal.user')),\n                m('.FormControl.SelectedUser', [\n                    this.user ? Button.component({\n                        icon: 'fas fa-times',\n                        onclick: () => {\n                            this.user = null;\n                            this.attributes.relationships = {\n                                user: [], // https://github.com/flarum/core/issues/2876\n                            };\n                            this.dirty = true;\n                        },\n                        className: 'Button Button--icon Button--link RemoveUserButton',\n                    }) : null,\n                    avatar(this.user),\n                    username(this.user),\n                ]),\n                UserSearch.component({\n                    state: this.userSearchState,\n                    onsubmit: (user: User) => {\n                        this.user = user;\n                        this.attributes.relationships = {\n                            user,\n                        };\n                        this.dirty = true;\n\n                        m.redraw();\n                    },\n                }),\n            ]) : null,\n            app.forum.attribute('clarkwinkelmannAuthorChangeCanEditDate') ? [\n                m('.Form-group', [\n                    m('label', app.translator.trans('clarkwinkelmann-author-change.forum.modal.created_at')),\n                    m('input.FormControl', {\n                        type: 'datetime-local',\n                        required: true,\n                        value: this.createdAt,\n                        onchange: (event: InputEvent) => {\n                            const {value} = event.target as HTMLInputElement;\n\n                            this.createdAt = value;\n                            this.attributes.createdAt = value;\n                            this.dirty = true;\n                        },\n                        disabled: this.loading,\n                    }),\n                ]),\n                this.isPost() ? m('.Form-group', [\n                    m('label', app.translator.trans('clarkwinkelmann-author-change.forum.modal.edited_at')),\n                    m('input.FormControl', {\n                        type: 'datetime-local',\n                        value: this.editedAt,\n                        onchange: (event: InputEvent) => {\n                            const {value} = event.target as HTMLInputElement;\n\n                            this.editedAt = value;\n                            this.attributes.editedAt = value;\n                            this.dirty = true;\n                        },\n                        disabled: this.loading,\n                    }),\n                ]) : null,\n            ] : null,\n            this.showFirstPostSync() ? m('.Form-group', [\n                Switch.component({\n                    state: this.syncFirstPost,\n                    onchange: (value: boolean) => {\n                        this.syncFirstPost = value;\n                        this.dirty = true;\n\n                        // We only put the values inside attributes when they change\n                        // but when switching the sync checkbox to true we want to force a sync of both attributes that\n                        // are on discussion+post\n                        if (value) {\n                            this.attributes.relationships = {\n                                user: this.user || [],\n                            };\n\n                            this.attributes.createdAt = this.createdAt;\n                        }\n                    },\n                    // Disable checkbox if other model isn't available since we won't have the ID to save it\n                    disabled: this.loading || !this.otherModelForFirstPostSync,\n                }, app.translator.trans('clarkwinkelmann-author-change.forum.modal.sync-with-' + (this.isPost() ? 'discussion' : 'post'))),\n                this.otherModelForFirstPostSync ? null : m('.helpText', app.translator.trans('clarkwinkelmann-author-change.forum.modal.sync-impossible'))\n            ]) : null,\n            m('.Form-group', [\n                Button.component({\n                    disabled: !this.dirty,\n                    loading: this.loading,\n                    type: 'submit',\n                    className: 'Button Button--primary',\n                }, app.translator.trans('clarkwinkelmann-author-change.forum.modal.submit')),\n                Button.component({\n                    className: 'Button CancelButton',\n                    onclick() {\n                        app.modal.close();\n                    },\n                }, app.translator.trans('clarkwinkelmann-author-change.forum.modal.cancel')),\n            ]),\n        ]);\n    }\n\n    saveModel(model: Discussion | Post) {\n        return model.save({\n            // Clone this.attributes so Model.save doesn't delete the relationships key\n            ...this.attributes,\n        });\n    }\n\n    onsubmit(event: Event) {\n        event.preventDefault();\n\n        this.loading = true;\n\n        this.saveModel(this.attrs.related).then((() => {\n            if (this.syncFirstPost && this.otherModelForFirstPostSync) {\n                return this.saveModel(this.otherModelForFirstPostSync);\n            }\n\n            return Promise.resolve();\n        }) as () => Promise<any>).then(() => {\n            this.loading = false;\n            this.dirty = false;\n\n            m.redraw();\n\n            app.modal.close();\n        }).catch(err => {\n            this.loading = false;\n            m.redraw();\n            throw err;\n        });\n    }\n}\n","import {extend} from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport PostControls from 'flarum/forum/utils/PostControls';\nimport Button from 'flarum/common/components/Button';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Post from 'flarum/common/models/Post';\nimport UpdateAuthorModal from './components/UpdateAuthorModal';\n\napp.initializers.add('clarkwinkelmann-author-change', () => {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion: Discussion) {\n        if (!app.forum.attribute('clarkwinkelmannAuthorChangeCanEditUser') && !app.forum.attribute('clarkwinkelmannAuthorChangeCanEditDate')) {\n            return;\n        }\n\n        items.add('clarkwinkelmann-author-change', Button.component({\n            icon: 'fas fa-user-edit',\n            onclick() {\n                app.modal.show(UpdateAuthorModal, {\n                    related: discussion,\n                });\n            },\n        }, app.translator.trans('clarkwinkelmann-author-change.forum.controls.edit')));\n    });\n\n    extend(PostControls, 'moderationControls', function (items, post: Post) {\n        if (!app.forum.attribute('clarkwinkelmannAuthorChangeCanEditUser') && !app.forum.attribute('clarkwinkelmannAuthorChangeCanEditDate')) {\n            return;\n        }\n\n        items.add('clarkwinkelmann-author-change', Button.component({\n            icon: 'fas fa-user-edit',\n            onclick() {\n                app.modal.show(UpdateAuthorModal, {\n                    related: post,\n                });\n            },\n        }, app.translator.trans('clarkwinkelmann-author-change.forum.controls.edit')));\n    });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_extends","assign","bind","target","i","arguments","length","source","apply","this","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","constructor","UsersSearchSourceWithoutInternalRouting","view","query","resultItems","filter","entry","attrs","className","indexOf","m","Button","icon","app","forEach","result","Array","isArray","children","tag","push","UsersSearchSource","UserSearch","selectUserElement","searchResultElement","index","dataset","userId","split","user","onsubmit","oncreate","vnode","$","on","event","$userSearchResult","parents","preventDefault","selectResult","clearTimeout","searchTimeout","loadingSources","state","getValue","getItem","clear","trigger","redraw","sourceItems","items","ItemList","add","placeholder","extractText","Search","UpdateAuthorModal","createdAt","editedAt","syncFirstPost","otherModelForFirstPostSync","attributes","dirty","loading","userSearchState","oninit","related","Post","toISOString","slice","SearchState","getInitialSearch","showFirstPostSync","Discussion","firstPost","find","post","number","discussion","isPost","title","content","onclick","relationships","avatar","username","component","type","required","onchange","disabled","Switch","saveModel","model","save","then","Promise","resolve","err","Modal","extend","DiscussionControls","PostControls"],"sourceRoot":""}